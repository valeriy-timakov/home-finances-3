// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для імітації користувачів
model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  emailVerified DateTime?
  accounts      UserAccount[]
  sessions      Session[]
  agent         Agent?
}

model UserAccount {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agent {
  id                 Int                 @id @map("id")
  user               User                @relation(fields: [id], references: [id])
  accounts           Account[]
  categories         Category[]
  transactions       Transaction[]
  productsOrServices ProductOrService[]
  transactionDetails TransactionDetail[]
}

model Currency {
  id         Int       @id @default(autoincrement())
  name       String
  code       String
  symbol     String
  local_code String
  accounts   Account[]
}

enum AccountType {
  OWN
  COUNTERPARTY
}

model Account {
  id              Int           @id @default(autoincrement())
  name            String
  type            AccountType
  description     String?
  currency        Currency      @relation(fields: [currencyId], references: [id])
  currencyId      Int
  agent           Agent         @relation(fields: [agentId], references: [id])
  agentId         Int
  // Зв'язки для транзакцій
  transactions    Transaction[] @relation("Account")
  counterpartyFor Transaction[] @relation("CounterpartyAccount")

  @@unique([name, agentId]) // Назва рахунку має бути унікальною для агента
  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

// Категорії витрат
model Category {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  agent              Agent              @relation(fields: [agentId], references: [id])
  agentId            Int
  superCategoryId    Int? // нове поле для ієрархії
  superCategory      Category?          @relation("CategoryToCategory", fields: [superCategoryId], references: [id])
  subCategories      Category[]         @relation("CategoryToCategory")
  productsOrServices ProductOrService[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

model MeasureUnit {
  id                  Int                @id @default(autoincrement())
  name                String             @unique
  shortName           String             @unique
  local_code          String
  productsAsMainUnit  ProductOrService[] @relation("measureUnit")
  productsAsPieceUnit ProductOrService[] @relation("pieceSizeMeasureUnit")
}

enum ProductOrServiceType {
  SERVICE
  PRODUCT
  PIECE_PRODUCT
  WEIGHT_PRODUCT
}

// Окрема таблиця для товарів та послуг
model ProductOrService {
  id                 Int                  @id @default(autoincrement())
  type               ProductOrServiceType
  name               String
  description        String
  manufacturer       String
  agent              Agent                @relation(fields: [agentId], references: [id])
  agentId            Int
  unitId             Int
  unit               MeasureUnit          @relation("measureUnit", fields: [unitId], references: [id])
  category           Category             @relation(fields: [categoryId, agentId], references: [id, agentId])
  categoryId         Int
  pieceSize          Float?
  pieceSizeUnitId    Int?
  pieceSizeUnit      MeasureUnit?         @relation("pieceSizeMeasureUnit", fields: [pieceSizeUnitId], references: [id])
  transactionDetails TransactionDetail[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

// Основна сутність - транзакція/витрата
model Transaction {
  id             Int                 @id @default(autoincrement())
  amount         Float // Загальна сума для швидкого доступу
  date           DateTime
  name           String
  description    String?
  agent          Agent               @relation(fields: [agentId], references: [id])
  agentId        Int
  account        Account             @relation("Account", fields: [accountId, agentId], references: [id, agentId])
  accountId      Int
  counterparty   Account             @relation("CounterpartyAccount", fields: [counterpartyId, agentId], references: [id, agentId])
  counterpartyId Int
  details        TransactionDetail[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

// Деталізація витрати (елементи чеку)
model TransactionDetail {
  id                 Int              @id @default(autoincrement())
  quantity           Float
  pricePerUnit       Float
  agent              Agent            @relation(fields: [agentId], references: [id])
  agentId            Int
  transaction        Transaction      @relation(fields: [transactionId, agentId], references: [id, agentId])
  transactionId      Int
  productOrService   ProductOrService @relation(fields: [productOrServiceId, agentId], references: [id, agentId])
  productOrServiceId Int
}
