// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для імітації користувачів
model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  emailVerified DateTime?
  accounts      UserAccount[]
  sessions      Session[]
  agent         Agent?
}

model UserAccount {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agent {
  id           Int           @id @map("id")
  user         User          @relation(fields: [id], references: [id])
  accounts     Account[]
  transactions Transaction[]
  Category     Category[]
}

model Account {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  agent           Agent         @relation(fields: [agentId], references: [id])
  agentId         Int
  // Зв'язки для транзакцій
  transactions    Transaction[] @relation("UserAccount")
  counterpartyFor Transaction[] @relation("CounterpartyAccount")

  @@unique([name, agentId]) // Назва рахунку має бути унікальною для агента
}

// Категорії витрат
model Category {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  productsOrServices ProductOrService[]
  agent              Agent              @relation(fields: [agentId], references: [id])
  agentId            Int
}

enum ProductType {
  PRODUCT
  SERVICE
}

model MeasureUnit {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  shortName        String             @unique
  ProductOrService ProductOrService[]
}

// Окрема таблиця для товарів та послуг
model ProductOrService {
  id         Int                 @id @default(autoincrement())
  type       ProductType
  name       String
  unitId     Int
  unit       MeasureUnit         @relation(fields: [unitId], references: [id])
  category   Category            @relation(fields: [categoryId], references: [id])
  categoryId Int
  details    TransactionDetail[]
}

// Основна сутність - транзакція/витрата
model Transaction {
  id             Int                 @id @default(autoincrement())
  amount         Float // Загальна сума для швидкого доступу
  date           DateTime
  name           String
  description    String?
  agent          Agent               @relation(fields: [agentId], references: [id])
  agentId        Int
  userAccount    Account             @relation("UserAccount", fields: [userAccountId], references: [id])
  userAccountId  Int
  counterparty   Account             @relation("CounterpartyAccount", fields: [counterpartyId], references: [id])
  counterpartyId Int
  details        TransactionDetail[]
}

// Деталізація витрати (елементи чеку)
model TransactionDetail {
  id                 Int              @id @default(autoincrement())
  quantity           Float
  pricePerUnit       Float
  transaction        Transaction      @relation(fields: [transactionId], references: [id])
  transactionId      Int
  productOrService   ProductOrService @relation(fields: [productOrServiceId], references: [id])
  productOrServiceId Int
}
