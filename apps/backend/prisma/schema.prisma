// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для імітації користувачів
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
  emailVerified DateTime?
  agent         Agent?
}

model Agent {
  id                 Int                     @id @map("id")
  user               User                    @relation(fields: [id], references: [id])
  accounts           Account[]
  categories         Category[]
  transactions       Transaction[]
  productsOrServices ProductOrService[]
  transactionDetails TransactionDetail[]
  balances           AccountBalanceHistory[]
}

model Currency {
  id                 Int       @id @default(autoincrement())
  name               String
  code               String
  symbol             String
  fractionalPartName String
  partFraction       Int
  accounts           Account[]
}

enum AccountType {
  OWN
  COUNTERPARTY
}

model Account {
  id              Int                     @id @default(autoincrement())
  name            String
  type            AccountType
  description     String?
  currency        Currency                @relation(fields: [currencyId], references: [id])
  currencyId      Int
  agent           Agent                   @relation(fields: [agentId], references: [id])
  agentId         Int
  // Зв'язки для транзакцій
  transactions    Transaction[]           @relation("Account")
  counterpartyFor Transaction[]           @relation("CounterpartyAccount")
  balances        AccountBalanceHistory[]

  @@unique([name, agentId]) // Назва рахунку має бути унікальною для агента
  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

model AccountBalanceHistory {
  id        Int      @id @default(autoincrement())
  account   Account  @relation(fields: [accountId, agentId], references: [id, agentId])
  accountId Int
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   Int
  amount    Int
  date      DateTime
}

// Категорії витрат
model Category {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  agent              Agent              @relation(fields: [agentId], references: [id])
  agentId            Int
  superCategoryId    Int? // нове поле для ієрархії
  superCategory      Category?          @relation("CategoryToCategory", fields: [superCategoryId], references: [id])
  subCategories      Category[]         @relation("CategoryToCategory")
  productsOrServices ProductOrService[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

model MeasureUnit {
  id                  Int                @id @default(autoincrement())
  name                String             @unique
  shortName           String             @unique
  local_code          String
  productsAsMainUnit  ProductOrService[] @relation("measureUnit")
  productsAsPieceUnit ProductOrService[] @relation("pieceSizeMeasureUnit")
}

enum ProductOrServiceType {
  SERVICE
  PRODUCT
}

// Окрема таблиця для товарів та послуг
model ProductOrService {
  id                 Int                  @id @default(autoincrement())
  type               ProductOrServiceType
  name               String
  description        String?
  manufacturer       String?
  agent              Agent                @relation(fields: [agentId], references: [id])
  agentId            Int
  unitId             Int?
  unit               MeasureUnit?         @relation("measureUnit", fields: [unitId], references: [id])
  category           Category?            @relation(fields: [categoryId, agentId], references: [id, agentId])
  categoryId         Int?
  pieceSize          Float?
  pieceSizeUnitId    Int?
  pieceSizeUnit      MeasureUnit?         @relation("pieceSizeMeasureUnit", fields: [pieceSizeUnitId], references: [id])
  transactionDetails TransactionDetail[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

// Основна сутність - транзакція/витратаn

model Transaction {
  id             Int                 @id @default(autoincrement())
  amount         Int //сума в сотих одиницях
  date           DateTime
  name           String
  description    String?
  agent          Agent               @relation(fields: [agentId], references: [id])
  agentId        Int
  account        Account             @relation("Account", fields: [accountId, agentId], references: [id, agentId])
  accountId      Int
  counterparty   Account?            @relation("CounterpartyAccount", fields: [counterpartyId, agentId], references: [id, agentId])
  counterpartyId Int?
  details        TransactionDetail[]

  // Додатковий унікальний індекс для (id, agentId) для складеного ключа
  @@unique([id, agentId])
}

// Деталізація витрати (елементи чеку)
model TransactionDetail {
  id                 Int              @id @default(autoincrement())
  quantity           Float?
  pricePerUnit       Int
  agent              Agent            @relation(fields: [agentId], references: [id])
  agentId            Int
  transaction        Transaction      @relation(fields: [transactionId, agentId], references: [id, agentId])
  transactionId      Int
  productOrService   ProductOrService @relation(fields: [productOrServiceId, agentId], references: [id, agentId])
  productOrServiceId Int
}
